networks: 
  dev:
    driver: bridge

volumes:
  storage:
  db_data:

services:
  ml_api:
    build:
      context: ./ml_api
    restart: unless-stopped
    container_name: ml_api
    environment:
      ML_API_HOST: ${ML_API_HOST}
      ML_API_PORT: ${ML_API_PORT}
      ML_API_MODEL: ${ML_API_MODEL}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
    ports:
      - "${ML_API_PORT}:${ML_API_PORT}"
    networks:
      - dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${ML_API_HOST}:${ML_API_PORT}/health/"]
      interval: 1h
      timeout: 5s
      retries: 1
      start_period: 10s

  db:
    image: postgres:15
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - dev
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1h
      timeout: 5s
      retries: 1
      start_period: 10s

  backend:
    build:
      context: ./backend
    restart: unless-stopped
    container_name: backend
    environment:
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      ML_API_HOST: ${ML_API_HOST}
      ML_API_PORT: ${ML_API_PORT}
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
      MEDIA_FOLDER: ${MEDIA_FOLDER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - storage:/${BACKEND_HOST}/${MEDIA_FOLDER}
    networks:
      - dev
    depends_on:
      db:
        condition: service_healthy
      ml_api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${BACKEND_HOST}:${BACKEND_PORT}/health/"]
      interval: 1h
      timeout: 5s
      retries: 1
      start_period: 10s

  frontend:
    build:
      context: ./frontend
    restart: unless-stopped
    container_name: frontend
    environment:
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      MEDIA_FOLDER: ${MEDIA_FOLDER}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - storage:/${FRONTEND_HOST}/${MEDIA_FOLDER}
    networks:
      - dev
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${FRONTEND_HOST}:${FRONTEND_PORT}/"]
      interval: 1h
      timeout: 5s
      retries: 1
      start_period: 10s

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: unless-stopped
    environment:
      - MEDIA_FOLDER=${MEDIA_FOLDER}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt
      - storage:/${MEDIA_FOLDER}
    networks:
      - dev
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
