networks: 
  dev:
    driver: bridge

volumes:
  minio-images:
  qdrant-embs:
  postgres-data:

services:
  ml_api:
    build:
      context: ./ml_api
    restart: unless-stopped
    container_name: ml_api
    environment:
      ML_API_HOST: ${ML_API_HOST}
      ML_API_PORT: ${ML_API_PORT}
      ML_API_MODEL: ${ML_API_MODEL}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
    ports:
      - "${ML_API_PORT}:${ML_API_PORT}"
    hostname: ${ML_API_PORT}
    networks:
      - dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${ML_API_HOST}:${ML_API_PORT}/health/"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server --console-address ":${MINIO_WEB_PORT}" /data/
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_WEB_PORT}:${MINIO_WEB_PORT}"
    networks:
      - dev
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_WEB_PORT: ${MINIO_WEB_PORT}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
    hostname: ${MINIO_HOST}
    volumes:
      - minio-images:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${MINIO_HOST}:${MINIO_PORT}/minio/health/live"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: always
    networks:
      - dev
    ports:
      - "${QDRANT_PORT}:${QDRANT_PORT}"
      - "${QDRANT_WEB_PORT}:${QDRANT_WEB_PORT}"
    volumes:
      - qdrant-embs:/qdrant/storage
    hostname: ${QDRANT_HOST}
    environment:
      QDRANT_HOST: ${QDRANT_HOST}
      QDRANT_PORT: ${QDRANT_PORT}
      QDRANT_WEB_PORT: ${QDRANT_WEB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "timeout 2 bash -c '</dev/tcp/${QDRANT_HOST}/${QDRANT_PORT}' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    hostname: ${POSTGRES_HOST}
    networks:
      - dev
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
    restart: unless-stopped
    container_name: backend
    environment:
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      ML_API_HOST: ${ML_API_HOST}
      ML_API_PORT: ${ML_API_PORT}
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      QDRANT_HOST: ${QDRANT_HOST}
      QDRANT_PORT: ${QDRANT_PORT}
      QDRANT_COLLECTION_NAME: ${QDRANT_COLLECTION_NAME}
    hostname: ${BACKEND_HOST}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - dev
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      ml_api:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${BACKEND_HOST}:${BACKEND_PORT}/health/"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s

  frontend:
    build:
      context: ./frontend
    restart: unless-stopped
    container_name: frontend
    environment:
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      MINIO_HOST: localhost # надо корректно сделать, когда буду выкатывать на проду
      MINIO_PORT: ${MINIO_PORT}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - dev
    hostname: ${FRONTEND_HOST}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${FRONTEND_HOST}:${FRONTEND_PORT}/"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - dev
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
